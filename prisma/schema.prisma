// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  username           String     @unique
  password           String
  email              String     @unique
  emailVerified      DateTime?
  image              String?
  avatarUrl          String?
  favoriteMovieIds   String[]   @db.ObjectId
  watchlistMovieIds  String[]   @db.ObjectId
  favoriteSeriesIds  String[]   @db.ObjectId
  watchlistSeriesIds String[]   @db.ObjectId
  accounts           Account[]
  sessions           Session[]
  favoriteMovies     Movie[]    @relation("FavoriteMovies", fields: [favoriteMovieIds], references: [id])
  watchlistMovies    Movie[]    @relation("WatchlistMovies", fields: [watchlistMovieIds], references: [id])
  favoriteSeries     Series[]   @relation("FavoriteSeries", fields: [favoriteSeriesIds], references: [id])
  watchlistSeries    Series[]   @relation("WatchlistSeries", fields: [watchlistSeriesIds], references: [id])
  playlists          Playlist[]
  followers          Follow[]   @relation("Following")
  following          Follow[]   @relation("Follower")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movie {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId             Int        @unique
  title              String
  posterPath         String?
  releaseDate        String?
  favoritedByIds     String[]   @db.ObjectId
  watchlistedByIds   String[]   @db.ObjectId
  favoritedBy        User[]     @relation("FavoriteMovies", fields: [favoritedByIds], references: [id])
  watchlistedBy      User[]     @relation("WatchlistMovies", fields: [watchlistedByIds], references: [id])
  playlists          Playlist[] @relation("PlaylistMovies", fields: [playlistIds], references: [id])
  playlistIds        String[]   @db.ObjectId
}

model Series {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId             Int        @unique
  name               String
  posterPath         String?
  firstAirDate       String?
  favoritedByIds     String[]   @db.ObjectId
  watchlistedByIds   String[]   @db.ObjectId
  favoritedBy        User[]     @relation("FavoriteSeries", fields: [favoritedByIds], references: [id])
  watchlistedBy      User[]     @relation("WatchlistSeries", fields: [watchlistedByIds], references: [id])
  playlists          Playlist[] @relation("PlaylistSeries", fields: [playlistIds], references: [id])
  playlistIds        String[]   @db.ObjectId
}

model Playlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  movies      Movie[]  @relation("PlaylistMovies", fields: [movieIds], references: [id])
  movieIds    String[] @db.ObjectId
  series      Series[] @relation("PlaylistSeries", fields: [seriesIds], references: [id])
  seriesIds   String[] @db.ObjectId
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}